* Editor
- use vscode
- Add .editorconfig
* Package Mangement
- use npm
- setup a default package.json needed for
  all projects
** scanning package for vulnerabilities
- use "node security platform"
- run "nsp check" as part of your build
- may want to add it as part of your "npm start" script
- install nsp globally to run the commanline tool.

sudo npm install nsp -g

- to run nsp do this:

nsp check

* Dev Web Servers
- run express
- how do you share this with others?
I need to be able to push my code to git and have kubernetes setup


* Automation
- task automation

** npm scripts - BEST CHOICE for automation
- use "npm scripts" to automate
- declared in the package.json
- leverage your OS's command line

*** why npm scripts?
https://medium.freecodecamp.com/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8
- use tools directly
- no need for separate plugins
- simpler debugging
- better docs
- easier to learn
- can call separate scripts that use node


*** run multiple scripts at once
runall package
** gulp
- improves on grunt
- configured via a grunt file
- very popular


** grunt
- task runner



* Transpiling
- babel which supports latest js
- typescript

* Bundling
- bundled up for usage.
- commonJS pattern does not work in web browsers, but does work in node
 - you need to bundle npm packages into a format that the browser can consume
- package any javascript into a single file or startegically into separate files

** module formats
*** AMD
*** CommonJS
used by node.js

*** UMB
*** IIFE (immediately invoked function expressions)

// this is an IIFE

(function(){
// my code here
})();

***  ES6 modules
**** standardized
**** statically analyzable
  improved autocomplete
  intelligent refactoring
**** easy to read


** names of bundlers
bundle up code into single minified file. you can use npm packages and they are bundled up
for the web.  takes commonJS format of node and makes it accessible to the browser.

*** require.js
- amd based

*** webpack
- Bundles js
- also, bundles css, images, etc like JS
- includes a hot-reloading web server
- webpack will bundle all our assets up into a single file that runs in our target environment
- webpack is defined via a single object we define in the webpack config file.
**** webpack.config.dev.js
/*
- webpack exports a single configuration object

*/
import path from 'path';

export default {
  debug: true,
  devtool: 'inline-source-map',
  noInfo: false,
  entry: [
    path.resolve(__dirname, 'src/index')
  ],
  target: 'web',
  output: {
    path: path.resolve(__dirname, 'src'),
    publicPath: '/',
    filename: 'bundle.js'
  },
  plugins: [],
  module: {
    loaders: [
      {test: /\.js$/, exclude: /node_modules/, loaders: ['babel']},
      {test: /\.css$/, loaders: ['style','css']}
    ]
  }
}


**** How do you debug transpiled and bundled code?
- the answer to doing that would be "sourcemaps"

- "sourcemaps" map the bundled, transpiled and minified code back to the original source
- sourcemaps map code back to the original source

*** browserify
- first bundle to reach mass adoption
- utilize npm packages on the web

*** jspm

*** rollup


* Linting
- ESlint for linting JS
   eslint does not have watching capailbity

- TSlint for linting typescript



** ESlint decisions to make
- config format
- which built-in rules to use
- use warnings or errors
- which plugins to use
- use preset instead ?

** eslint-watch
a wrapper around eslint that adds watching capability

** eslint-loader



* Unit Testing
** Other types of testing
*** Integration testing
- focus on the  interactions between modules
- connect to api
- spin up selenium

*** UI testing
- automated interactions with the UI
- selenium for browser automation

** Unit testing focus on what?
Unit testing focus on a single function or module in an automated fashion

** Unit Test Decisions
*** framework
**** mocha most popular
does NOT include an assertion library

****  jasmine
includes an assertion library

**** ava
- run tests in parallel


*** assertion library
- mocha does not come with an assertion library
**** chai
the most popular assertion library


*** helper libraries
****  jsdom
**** cheerio
jquery for the server


*** where to run tests
**** browser
- karma
- testem

**** headless browser
- phamtomJS

**** in-memory DOM
just simpulating a dom in memory not a full browser

- JSDOM







* CI server
- builds application automatically the moment you commit
- runs test suite
- check code coverage
- automate deployment

** CI servers
- travis (hosted)
- jenkins

* HTTP requests
** node (server)
- http
- request (probably best to use)


** browser (client)
- XMLHttpRequest
- jQuery
- Framework-based
- Fetch (probably best to use Fetch with a polyfill)


** node and browser ( client and server)
- isomorphic-fetch
- xhr (package on npm)
- SuperAgent
- Axios




** centralize API calls

** why mock http calls?
- you would do this for "unit testing"
- instant response
** how to mock http calls
- api-mock
- JSON server
- JSON schema faker

*** Nock to mock http calls for your unit tests

** plan for mocking http
*** declare our schema
json schema faker
*** generate random data
faker.js
chance.js
randexp.js

*** serve data via api
json server

** MOCK HTTP
- json schema faker
  faker, chance, regexp


* project structure
- organize by feature


* production builds
** minification
- sourcemaps allow you to debug code in production


* automated deploy

* PLAN
- finish build stuff - video  << TODAY >>
- RESTful Web API Design with Node.js - Second Edition  - video 2:35 << TODAY>>
- typescript tutorial  << start today - typescript fundamentals >>
- jasmine tutorial
- build micro service  -- BUILD WEDNESDAY
- build gateway   -- build THURSDAY


- review angular
- build angular
